* Concrete slab bridge simulation [[https://circleci.com/gh/barischrooneyj/bridge-sim.svg?style=svg]]
  
*Cleanup in progress! Features are at varying levels of readiness, though the examples below should at least all work. The API will be improved after I submit my thesis. Currently the codebase is a bit messy as I have begun the migration to a more user-friendly API.*

*If you are interested in using this library, please open an issue to ask any questions! Please open one issue per question. I do love feedback, so don't hesitate to communicate any thoughts. Please star the project if you like it.*

[[./data/animation.png]]

** Installation

*** Docker

Make sure you have [[https://docs.docker.com/get-docker/][Docker]] installed.

Then in a terminal run the following to jump into a Docker image that already has all dependencies installed:

#+BEGIN_SRC bash
docker run -ite LC_ALL=C.UTF-8 -e LANG=C.UTF-8 barischrooneyj/bridge-sim:v0.0.2
#+END_SRC

Run the provided example file /example.py/ with =pipenv run python example.py=. This will generate an image /docker.png/.

To copy the generated image to your host system run the following commands in a separate terminal. The first command lists all running Docker containers. Copy the container ID and then use the =docker cp= command to copy the output to your host system.

#+BEGIN_SRC bash
$ docker ps
CONTAINER ID        IMAGE                              COMMAND          CREATED             STATUS            PORTS     NAMES
d297a50ff165        barischrooneyj/bridge-sim:v0.0.1   "/bin/bash"      37 seconds ago      Up 37 seconds               vigorous_leavitt
$ docker cp d297a50ff165:/bridge-sim/docker.png docker.png
#+END_SRC

To copy other files to the Docker container you can run =docker cp local-files/ d297a50ff165:/bridge-sim/=. Run =docker cp= or search the web for more information.

*** Directly

These instructions are if you are interested in developing the =bridge-sim= software, or if you cannot run =bridge-sim= via Docker. A Python package will be published on PyPI at some point however hopefully either of the available methods should suffice in the meantime.

Make sure you have Python 3.7+ installed. And also [[https://pipenv.kennethreitz.org/en/latest/install/#installing-pipenv][install Pipenv]]. Perhaps with =pip install --user pipenv=?

You will need [[https://opensees.berkeley.edu/][OpenSees]], you can download it [[https://opensees.berkeley.edu/OpenSees/user/download.php][here]]. If installing OpenSees on Linux the top answer [[https://www.researchgate.net/post/How_to_install_opensees_in_UBUNTU][here]] may be of some help. Alternatively using an existing Docker image could be another way to go.

Clone this repository and change into the directory:

#+BEGIN_SRC bash
git clone https://github.com/barischrooneyj/bridge-sim
cd bridge-sim
#+END_SRC

In the =bridge-sim= directory install project dependencies with =pipenv install=. If you have an error and are on the Windows OS you may need to ~pipenv install pypiwin32~. I do not run Windows so can be of limited help there.

** Introduction

A brief introduction to some of the Python classes provided. A =Bridge= describes the material properties and geometry of a bridge. A =FEMRunner= is capable of transforming a =Bridge= along with some additional simulation parameters into a model file, running that file, and returning the responses from simulation. This project currently provides one instance of =FEMRunner= which is called =OSRunner= and is capable of running simulations with OpenSees. A =Config= contains some additional global configuration but is also used as a container for a =Bridge= and =FEMRunner=. This is useful because all three of these objects are required in many situations and combining them into one object makes life a bit easier than passing these three objects around separately.

# [[./data/images/config-composition.png]]

** Examples

To run an example, uncomment the relevant code in =bridge-sim/example.py=.

You will probably have to modify the example, so it can find your OpenSees executable:

#+BEGIN_SRC python
# From this:
config = configs.opensees_default(bridges.bridge_example)
# To this:
config = configs.opensees_default(bridges.bridge_example, "c:/Path/To/OpenSees.exe")
#+end_SRC

Then run the example with =pipenv run python example.py=.

*** Point Load

Example bridge with a single point load applied.

#+BEGIN_SRC python
import matplotlib.pyplot as plt
from bridge_sim import bridges, configs, fem, model, plot

config = configs.opensees_default(bridges.bridge_example)
point_loads = [model.PointLoad(config, x=5, z=0, load=100)]
responses = fem.responses(config, model.RT.YTranslation, point_loads)
plot.contour_responses(config, responses, point_loads)
plot.top_view_bridge(config, piers=True)
plt.tight_layout()
plt.show()
#+END_SRC

*** Static Vehicle

Example bridge with a 4-axled vehicle on it, each wheel is a point load.

#+BEGIN_SRC python
import matplotlib.pyplot as plt
from bridge_sim import bridges, configs, fem, model, plot, vehicle

config = configs.opensees_default(bridges.bridge_example, shorten_paths=True)
point_loads = vehicle.wagen1.to_point_load_pw(time=3.5, bridge=config.bridge, list=True)
responses = fem.responses(config, model.RT.YTranslation, point_loads)
plot.contour_responses(config, responses, point_loads)
plot.top_view_bridge(config, piers=True)
plt.tight_layout()
plt.show()
#+END_SRC

*** Pier Settlement

Wide bridge with two supporting piers, one pier is settled.

#+BEGIN_SRC python
import matplotlib.pyplot as plt
from bridge_sim import bridges, configs, fem, model, plot

config = configs.opensees_default(bridges.bridge_wide)
responses = fem.responses(
    config,
    model.RT.YTranslation,
    pier_settle=model.PierSettlement(0, 1)
)
plot.contour_responses(config, responses)
plot.top_view_bridge(config, piers=True, lanes=True)
plt.tight_layout()
plt.show()
#+END_SRC

*** Different Response Types

Like the pier settlement example but plotting multiple response types.

#+BEGIN_SRC python
import matplotlib.pyplot as plt
from bridge_sim import bridges, configs, fem, model, plot

config = configs.opensees_default(bridges.bridge_wide)
plt.figure(figsize=(16, 10))  # Increase plot size.
for response_type, subplot in [
        (model.RT.YTranslation, 1),
        (model.RT.ZTranslation, 2),
        (model.RT.Strain, 3),  # Will be renamed to StrainXXB.
        (model.RT.StrainZZB, 4),
    ]:
    responses = fem.responses(
        config,
        response_type,
        pier_settle=model.PierSettlement(0, 1)
    ).resize()  # Make units more readable, m -> mm, strain to microstrain.
    plt.subplot(2, 2, subplot)
    plot.contour_responses(config, responses)
    plot.top_view_bridge(config, piers=True, lanes=True)

plt.tight_layout()
plt.show()
#+END_SRC

*** Custom Bridge

Like the first point-load example but with a really long and narrow bridge.

#+BEGIN_SRC python
import matplotlib.pyplot as plt
from bridge_sim import bridges, configs, fem, model, plot
from bridge_sim.bridges import Bridge, Lane, MaterialDeck, MaterialSupport, Support


def new_bridge():
    return Bridge(
        name="example",   # Name used to identify saved/loaded data.
        length=40,  # Length of this bridge.
        width=3,  # Width of this bridge.
        supports=[
            Support(
                x=20,  # X position of center of the support.
                z=0,  # Z position of center of the support.
                length=2,  # Length between support columns (X direction).
                height=2,  # Height from top to bottom of support.
                width_top=2,  # Width of support column at top (Z direction).
                width_bottom=1,  # Width of support column at bottom (Z direction).
                materials=[  # List of materials for the support columns.
                    MaterialSupport(
                        density=0.7,
                        thickness=0.7,
                        youngs=40000,
                        poissons=0.2,
                        start_frac_len=0,
                    )
                ],
                fix_z_translation=True,
                fix_x_translation=True,
            )
        ],
        # List of materials for the bridge deck.
        materials=[MaterialDeck(thickness=0.7, youngs=40000, poissons=0.2,)],
        # List of lanes where traffic can drive on the bridge.
        lanes=[Lane(-1, 1, True)],
    )

config = configs.opensees_default(new_bridge)
point_loads = [model.PointLoad(config, x=18, z=0, load=100)]
responses = fem.responses(config, model.RT.YTranslation, point_loads)
plot.contour_responses(config, responses, point_loads)
plot.top_view_bridge(config, piers=True)
plt.tight_layout()
plt.show()
#+END_SRC

*** Custom Vehicle

Like the first static vehicle example, but this time with a custom vehicle.

#+BEGIN_SRC python
import matplotlib.pyplot as plt
from bridge_sim import bridges, configs, fem, model, plot, vehicle
from bridge_sim.vehicle import Vehicle

new_vehicle = Vehicle(
    # Load intensity of each axle.
    kn=[5000, 4000, 4000, 5000, 7000],
    # Distance between each pair of axles.
    axle_distances=[2, 2, 2, 1],
    # Width of each axle, distance between point loads.
    axle_width=2.5,
    # Speed of the vehicle.
    kmph=20,
    # Index of a traffic lane on the bridge.
    lane=0,
    # Fraction of the position on the lane at time = 0.
    init_x_frac=0,
)

config = configs.opensees_default(bridges.bridge_example, shorten_paths=True)
point_loads = new_vehicle.to_point_load_pw(time=3.5, bridge=config.bridge, list=True)
responses = fem.responses(config, model.RT.YTranslation, point_loads)
plot.contour_responses(config, responses, point_loads)
plot.top_view_bridge(config, piers=True)
plt.tight_layout()
plt.show()
#+END_SRC

*** Traffic Flow

* Concrete slab bridge simulation [[https://circleci.com/gh/barischrooneyj/bridge-sim.svg?style=svg&circle-token=20fdf4442f5ec94ea46006e65a551c1cc304667c]]
  
*Cleanup in progress! Features are at varying levels of readiness, though the examples below should at least all work. The API will be improved after I submit my thesis. Currently the codebase is a bit messy as I have begun the migration to a more user-friendly API.*

*If you are interested in using this library, please open an issue to ask any questions! Please open one issue per question. I do love feedback, so don't hesitate to communicate any thoughts. Please star the project if you like it.*

[[./data/animation.png]]

** Installation

*A Python package will be introduced soon (matter of weeks), however in the mean time, installation is by downloading and running the source code directly.*

Make sure you have Python 3.7+ installed.

And also [[https://pipenv.kennethreitz.org/en/latest/install/#installing-pipenv][install Pipenv]]. Perhaps with =pip install --user pipenv=?

You will need [[https://opensees.berkeley.edu/][OpenSees]], you can download it [[https://opensees.berkeley.edu/OpenSees/user/download.php][here]].

Clone this repository and change into the directory:

#+BEGIN_SRC bash
git clone --single-branch https://github.com/barischrooneyj/bridge-sim
cd bridge-sim
#+END_SRC

In the =bridge-sim= directory install project dependencies with =pipenv install=.

If you have an error and are on the Windows OS you may need to ~pipenv install pypiwin32~.

I do not run Windows so can be of limited help there.

** Introduction

A brief introduction to some of the Python classes provided. A =Bridge= describes the material properties and geometry of a bridge. A =FEMRunner= is capable of transforming a =Bridge= along with some additional simulation parameters into a model file, running that file, and returning the responses from simulation. This project currently provides one instance of =FEMRunner= which is called =OSRunner= and is capable of running simulations with OpenSees. A =Config= contains some additional global configuration but is also used as a container for a =Bridge= and =FEMRunner=. This is useful because all three of these objects are required in many situations and combining them into one object makes life a bit easier than passing these three objects around separately.

# [[./data/images/config-composition.png]]

** Examples

To run an example, uncomment the relevant code in =bridge-sim/example.py=.

You will probably have to modify the example, so it can find your OpenSees executable:

#+BEGIN_SRC python
# From this:
config = configs.opensees_default(bridges.bridge_example)
# To this:
config = configs.opensees_default(bridges.bridge_example, "c:/Path/To/OpenSees.exe")
#+end_SRC

Then run the example with =pipenv run python example.py=.

*** Point Load

Example bridge with a single point load applied.

#+BEGIN_SRC python
import matplotlib.pyplot as plt
from bridge_sim import bridges, configs, fem, model, plot

config = configs.opensees_default(bridges.bridge_example)
point_loads = [model.PointLoad(config, x=5, z=0, load=100)]
responses = fem.responses(config, model.RT.YTranslation, point_loads)
plot.contour_responses(config, responses, point_loads)
plot.top_view_bridge(config, piers=True)
plt.tight_layout()
plt.show()
#+END_SRC

*** Static Vehicle

Example bridge with a 4-axled vehicle on it, each wheel is a point load.

#+BEGIN_SRC python
import matplotlib.pyplot as plt
from bridge_sim import bridges, configs, fem, model, plot, vehicle

config = configs.opensees_default(bridges.bridge_example, shorten_paths=True)
point_loads = vehicle.wagen1.to_point_load_pw(time=3.5, bridge=config.bridge, list=True)
responses = fem.responses(config, model.RT.YTranslation, point_loads)
plot.contour_responses(config, responses, point_loads)
plot.top_view_bridge(config, piers=True)
plt.tight_layout()
plt.show()
#+END_SRC

*** Pier Settlement

Wide bridge with two supporting piers, one pier is settled.

#+BEGIN_SRC python
import matplotlib.pyplot as plt
from bridge_sim import bridges, configs, fem, model, plot

config = configs.opensees_default(bridges.bridge_wide)
responses = fem.responses(
    config,
    model.RT.YTranslation,
    pier_settle=model.PierSettlement(0, 1)
)
plot.contour_responses(config, responses)
plot.top_view_bridge(config, piers=True, lanes=True)
plt.tight_layout()
plt.show()
#+END_SRC

*** Different Response Types

Like the pier settlement example but plotting multiple response types.

#+BEGIN_SRC python
import matplotlib.pyplot as plt
from bridge_sim import bridges, configs, fem, model, plot

config = configs.opensees_default(bridges.bridge_wide)
plt.figure(figsize=(16, 10))  # Increase plot size.
for response_type, subplot in [
        (model.RT.YTranslation, 1),
        (model.RT.ZTranslation, 2),
        (model.RT.Strain, 3),  # Will be renamed to StrainXXB.
        (model.RT.StrainZZB, 4),
    ]:
    responses = fem.responses(
        config,
        response_type,
        pier_settle=model.PierSettlement(0, 1)
    ).resize()  # Make units more readable, m -> mm, strain to microstrain.
    plt.subplot(2, 2, subplot)
    plot.contour_responses(config, responses)
    plot.top_view_bridge(config, piers=True, lanes=True)

plt.tight_layout()
plt.show()
#+END_SRC

*** Custom Bridge

TODO

*** Custom Vehicle

TODO

*** Traffic Flow

TODO
